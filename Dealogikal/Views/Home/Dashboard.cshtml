
@{
    ViewBag.Title = "Dashboard";
    var name = ViewBag.Name;
}
<div class="content-wrapper">
    <div class="row">
        <div class="col-md-12 grid-margin d-flex flex-column align-items-start">
            <h2 class="font-weight-bold text-left">Welcome @name</h2>
            <div class="d-flex flex-column align-items-start" style="margin-top: 20px;">
                <!-- Work Mode Dropdown -->
                <select id="workMode" class="form-control" style="margin-bottom: 10px; width: 200px; text-align: center;">
                    <option value="onsite">Onsite</option>
                    <option value="work-from-home">Work from Home</option>
                </select>

                <div class="d-flex align-items-center">
                    <!-- Live Analog Clock and Digital Clock with Date -->
                    <div class="d-flex flex-column align-items-center" style="margin-right: 20px;">
                        <canvas id="analogClock" width="200" height="200" style="background: white; border-radius: 50%; box-shadow: 0px 0px 10px rgba(0,0,0,0.1);"></canvas>
                        <div id="digitalClock" style="font-size: 18px; margin-top: 10px; font-weight: bold; text-align: center;"></div>
                        <div id="liveDate" style="font-size: 16px; font-weight: bold; text-align: center; color: gray; margin-top: 5px;"></div>
                    </div>
                    <button type="button" class="btn btn-inverse-info btn-icon" style="font-size: 20px; padding: 25px 50px; display: flex; justify-content: center; align-items: center; white-space: nowrap;">Time In</button>
                    &nbsp;
                    <button type="button" class="btn btn-inverse-dark btn-icon" style="font-size: 20px; padding: 25px 50px; display: flex; justify-content: center; align-items: center; white-space: nowrap;">Time Out</button>
                </div>
            </div>
        </div>
    </div>

    <div class="right-section">
        <!-- To-Do List Section -->
        <div class="todo-container">
            <h4>To-do List:</h4>
            <div class="add-items d-flex mb-2">
                <form class="form w-100">
                    <div class="form-group d-flex">
                        <textarea class="form-control todo-list-input"
                                  placeholder="Add To-do"
                                  maxlength="200"></textarea>
                        <button type="submit" class="btn btn-primary todo-list-add-btn" id="add-task">
                            Add
                        </button>
                    </div>
                </form>
            </div>
            <div class="list-wrapper">
                <ul class="todo-list"></ul>
            </div>
        </div>
    </div>
</div>


<style>
   /* Move To-Do List Back to the Right Side */
.right-section {
    width: 350px;
    position: absolute;
    right: 20px; /* Adjust to move it back to the right */
    top: 150px;
}

/* Adjust To-Do Container Width */
.todo-container {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 5px;
    box-shadow: 0px 0px 10px rgba(0,0,0,0.1);
    width: 350px;
}

/* Ensure Proper List Item Alignment */
.todo-list li {
    background: #fffa90;
    padding: 10px;
    border-radius: 10px;
    margin-bottom: 10px;
    word-wrap: break-word;
    overflow-wrap: break-word;
    white-space: pre-wrap;
    word-break: break-word;
    box-shadow: 2px 2px 5px rgba(0,0,0,0.2);
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    position: relative;
}

/* Delete Button Adjustments */
.todo-list li .delete-btn {
    position: absolute;
    top: 5px;
    right: 5px;
    background: red;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 12px;
    width: 50px;
    height: 25px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
}

.todo-list li .delete-btn:hover {
    background: darkred;
}



    /* Completed task effect */
    .todo-list li.completed span {
        text-decoration: line-through;
        color: gray;
    }

    .list-wrapper {
        max-width: 100%;
        max-height: 200px;
        overflow-y: auto;
        margin-top: 10px;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let inputField = document.querySelector(".todo-list-input");
        let addButton = document.querySelector("#add-task");
        let todoList = document.querySelector(".todo-list");

        // Auto-resize textarea
        inputField.addEventListener("input", function () {
            this.style.height = "auto"; // Reset height first
            this.style.height = this.scrollHeight + "px"; // Adjust height dynamically
        });

        // Ensure the Add button remains fixed in size
        addButton.style.flexShrink = "0";
        addButton.style.width = "80px";
        addButton.style.height = "40px";
        addButton.style.padding = "10px";

        document.querySelector("#add-task").addEventListener("click", function (event) {
            event.preventDefault();
            let taskText = inputField.value.trim();
            if (taskText !== "") {
                let newTask = document.createElement("li");
                newTask.style.position = "relative"; // Ensure proper positioning
                newTask.style.display = "flex";
                newTask.style.alignItems = "center";
                newTask.style.justifyContent = "space-between";
                newTask.style.paddingRight = "50px"; // Space for delete button

                // Get current date in mm/dd/yyyy format
                let currentDate = new Date();
                let formattedDate = (currentDate.getMonth() + 1).toString().padStart(2, '0') + "/" +
                                    currentDate.getDate().toString().padStart(2, '0') + "/" +
                                    currentDate.getFullYear();

                // Date element
                let dateElement = document.createElement("div");
                dateElement.textContent = formattedDate;
                dateElement.style.fontSize = "12px";
                dateElement.style.fontWeight = "bold";
                dateElement.style.marginBottom = "5px";

                // Checkbox
                let checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.style.marginRight = "10px";
                checkbox.addEventListener("change", function () {
                    newTask.classList.toggle("completed", this.checked);
                });

                // Task text
                let taskSpan = document.createElement("span");
                taskSpan.textContent = taskText;
                taskSpan.style.flexGrow = "1";

                // Delete button (Fixed Small, Right Side)
                let deleteBtn = document.createElement("button");
                deleteBtn.textContent = "Delete";
                deleteBtn.classList.add("delete-btn");
                deleteBtn.style.width = "50px";
                deleteBtn.style.height = "25px";
                deleteBtn.style.fontSize = "12px";
                deleteBtn.style.padding = "0";
                deleteBtn.style.borderRadius = "5px";
                deleteBtn.style.background = "red";
                deleteBtn.style.color = "white";
                deleteBtn.style.border = "none";
                deleteBtn.style.cursor = "pointer";
                deleteBtn.style.marginLeft = "10px";

                // Create a container for date and task
                let taskContainer = document.createElement("div");
                taskContainer.appendChild(dateElement);
                taskContainer.appendChild(newTask);

                deleteBtn.addEventListener("click", function () {
                    taskContainer.remove(); // Remove both date and task
                });

                newTask.appendChild(checkbox);
                newTask.appendChild(taskSpan);
                newTask.appendChild(deleteBtn);

                // Insert the new task at the top
                todoList.prepend(taskContainer);

                inputField.value = "";
                inputField.style.height = "40px"; // Reset textarea height
            }
        });
    });



    function updateClock() {
        const now = new Date();
        const hours = now.getHours();
        const minutes = now.getMinutes();
        const seconds = now.getSeconds();
        document.getElementById("digitalClock").textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        document.getElementById("liveDate").textContent = now.toDateString();
        drawAnalogClock(hours, minutes, seconds);
    }

    function drawAnalogClock(hours, minutes, seconds) {
        const canvas = document.getElementById("analogClock");
        const ctx = canvas.getContext("2d");

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.save();
        ctx.translate(canvas.width / 2, canvas.height / 2);

        function drawHand(length, width, angle, color = "black") {
            ctx.save();
            ctx.rotate(angle * (Math.PI / 180));
            ctx.strokeStyle = color;
            ctx.lineWidth = width;
            ctx.beginPath();
            ctx.moveTo(0, 0);
            ctx.lineTo(0, -length);
            ctx.stroke();
            ctx.restore();
        }

        drawHand(50, 6, (hours % 12) * 30 + minutes * 0.5);
        drawHand(70, 4, minutes * 6);
        drawHand(90, 2, seconds * 6, "red");

        ctx.restore();
    }

    setInterval(updateClock, 1000);
</script>

















































